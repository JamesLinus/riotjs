This is a JavaScript implementation of "Riot":http://github.com/thumblemonks/riot/

It will run in a browser or in Rhino.

The tests look like this:

<pre>
Riot.run(function() {
  context('basic riot functionality', function() {
    given('some simple equality tests', function() {
      asserts('a simple truth test should return true', true).isTrue();
      asserts('isNull is null', null).isNull();
    });

    given('another context', function() {
      asserts('equals should compare strings as expected', 'test string').equals('test string');
    });

    given('a context concerned with functions', function() {
      asserts('asserts() should allow functions to be compared', function() {
        return 'test string';
      }).equals('test string');
    });
  });

  given('yet another context', function() {
    asserts('equals should compare strings as expected', 'test string').equals('test string');
  });
});
</pre>

h3. Assertions

* <code>equals</code> - for example, <code>asserts('description').equals('value')</code>
* <code>isNull</code>
* <code>isTrue</code>
* <code>typeOf</code>
* <code>raises</code>

h3. Riot.run

<code>Riot.run(function() { // your tests });</code> just adds your tests to <code>window.onload</code>.  If there's already an <code>onload</code> handler it'll prepend it.  If there's no <code>window</code> it will just run the tests.

h3. Todo

* Assert matches
* Add formatter for xpcomcore
* Gabriel will probably like java.lang.System.exit(1); for CI builds
* Ask g-man about actual() -- I defer execution to transparently match functions/values, but does this make sense?
* Extract the assertions into their own property list so adding user-defined ones is cleaner
* If you don't give a damn then we don't give a fuck
