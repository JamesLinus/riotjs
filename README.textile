This is a JavaScript implementation of "Riot":http://github.com/thumblemonks/riot/.

It will run in a browser or in Rhino.

h3. Example

Tests look like this:

<pre>
Riot.run(function() {
  context('basic riot functionality', function() {
    given('some simple equality tests', function() {
      asserts('a simple truth test should return true', true).isTrue();
      asserts('isNull is null', null).isNull();
    });

    given('another context', function() {
      asserts('equals should compare strings as expected', 'test string').equals('test string');
    });

    given('a context concerned with functions', function() {
      asserts('asserts() should allow functions to be compared', function() {
        return 'test string';
      }).equals('test string');
    });
  });

  given('yet another context', function() {
    asserts('equals should compare strings as expected', 'test string').equals('test string');
  });
});
</pre>

There are a few aliases to make tests (and output) read more naturally:

* <code>context</code>: <code>given</code> -- Given will add "Given..." to the title in the test output
* <code>asserts</code>: <code>should</code>

h3. Assertions

* <code>equals</code> - for example, <code>asserts('description').equals('value')</code>
* <code>matches</code> - matches a regex
* <code>typeOf</code> - aliased to isTypeOf, kindOf
* <code>isNull</code>
* <code>isTrue</code>
* <code>raises</code>

h3. Riot.run

<code>Riot.run(function() { // your tests });</code> just adds your tests to <code>window.onload</code>.  If there's already an <code>onload</code> handler it won't add itself.  If there's no <code>window</code> it will just run the tests.

<code>Riot.load()</code> can be used to load required scripts in a browser or interpreter.  <code>Riot.require()</code> only loads files once by keeping a record of files that have already been loaded.

It can also be called with no parameters to run tests defined with <code>Riot.context</code>.  This can be used to create a set of files with tests inside a <code>Riot.context</code> for each file

h3. Packaging

Packaged as a RubyGem usable via "XPCOMCore-RubyGems":http://github.com/conflagrationjs/xpcomcore-rubygem -- "riotjs-xpcc":http://github.com/conflagrationjs/riotjs-xpcc.

h3. Writing a test for a browser AND interpreter

My current pattern looks like this:

<pre>
load('riot.js');
Riot.require('../turing.core.js');
Riot.require('../turing.oo.js');
Riot.require('fixtures/example_classes.js');  

Riot.context('turing.oo.js', function() {
  // Tests go here
});

Riot.run();
</pre>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Riot&lt;/title&gt;
    &lt;style&gt;
p.pass { color: green; font-weight: bold; margin: 0 }
p.fail { color: red; font-weight: bold; margin: 0 }
#test-results ul { margin-bottom: 1em }
    &lt;/style&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;riot.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;core_test.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;oo_test.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;test-results&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

Note:

* <code>load()</code> is no-op'd in browsers if it doesn't exist by Riot
* <code>Riot.run()</code> will only run once, so you can include multiple Riot test files
* Specifying <code>Riot.run()</code> at the end of each test file lets you run that file with <code>js Riot.run()</code> in the console

